name: Build & Release (Windows)

on:
  push:
    tags: ['v*.*.*']         # билд по тэгам vX.Y.Z
  workflow_dispatch:         # и вручную из Actions

jobs:
  build-win:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      # Кэш бинарей Electron и electron-builder (ускоряет и лечит обрывы)
      - name: Cache Electron caches
        uses: actions/cache@v4
        with:
          path: |
            ~\AppData\Local\electron\Cache
            ~\AppData\Local\electron-builder\Cache
          key: electron-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            electron-${{ runner.os }}-

      - name: Install deps (ci если есть lock, иначе i)
        shell: pwsh
        run: |
          if (Test-Path 'package-lock.json') {
            npm ci
          } else {
            npm install --no-audit --no-fund
          }

      # ICO генерировать не будем — просто проверим, что он есть
      - name: Ensure build/icon.ico exists
        shell: pwsh
        run: |
          if (-not (Test-Path 'build\icon.ico')) {
            throw "Файл build\icon.ico не найден. Добавь его в репозиторий."
          }

      - name: Build & Publish to GitHub Releases
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # electron-builder читает GH_TOKEN
          # Зеркала — уменьшают шанс ERR_ELECTRON_BUILDER_CANNOT_EXECUTE
          ELECTRON_MIRROR: https://github.com/electron/electron/releases/download/
          ELECTRON_BUILDER_BINARIES_MIRROR: https://github.com/electron-userland/electron-builder-binaries/releases/download/
        run: npx electron-builder --win nsis portable -p always
